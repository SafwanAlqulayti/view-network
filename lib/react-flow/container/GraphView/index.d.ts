import React, { CSSProperties, MouseEvent, WheelEvent } from 'react';
import { Elements, NodeTypesType, EdgeTypesType, OnLoadFunc, Node, Edge, Connection, ConnectionLineType, ConnectionLineComponent, FlowTransform, OnConnectStartFunc, OnConnectStopFunc, OnConnectEndFunc, TranslateExtent } from '../../types';
export interface GraphViewProps {
    elements: Elements;
    onElementClick?: (event: MouseEvent, element: Node | Edge) => void;
    onElementsRemove?: (elements: Elements) => void;
    onNodeMouseEnter?: (event: MouseEvent, node: Node) => void;
    onNodeMouseMove?: (event: MouseEvent, node: Node) => void;
    onNodeMouseLeave?: (event: MouseEvent, node: Node) => void;
    onNodeContextMenu?: (event: MouseEvent, node: Node) => void;
    onNodeDragStart?: (event: MouseEvent, node: Node) => void;
    onNodeDragStop?: (event: MouseEvent, node: Node) => void;
    onConnect?: (connection: Connection | Edge) => void;
    onConnectStart?: OnConnectStartFunc;
    onConnectStop?: OnConnectStopFunc;
    onConnectEnd?: OnConnectEndFunc;
    onLoad?: OnLoadFunc;
    onMove?: (flowTransform?: FlowTransform) => void;
    onMoveStart?: (flowTransform?: FlowTransform) => void;
    onMoveEnd?: (flowTransform?: FlowTransform) => void;
    onPaneScroll?: (event?: WheelEvent) => void;
    onPaneClick?: (event: MouseEvent) => void;
    onPaneContextMenu?: (event: MouseEvent) => void;
    onSelectionDragStart?: (event: MouseEvent, nodes: Node[]) => void;
    onSelectionDrag?: (event: MouseEvent, nodes: Node[]) => void;
    onSelectionDragStop?: (event: MouseEvent, nodes: Node[]) => void;
    onSelectionContextMenu?: (event: MouseEvent, nodes: Node[]) => void;
    selectionKeyCode: number;
    nodeTypes: NodeTypesType;
    edgeTypes: EdgeTypesType;
    connectionLineType: ConnectionLineType;
    connectionLineStyle?: CSSProperties;
    connectionLineComponent?: ConnectionLineComponent;
    deleteKeyCode: number;
    snapToGrid: boolean;
    snapGrid: [number, number];
    onlyRenderVisibleNodes: boolean;
    nodesDraggable?: boolean;
    nodesConnectable?: boolean;
    elementsSelectable?: boolean;
    selectNodesOnDrag?: boolean;
    minZoom?: number;
    maxZoom?: number;
    defaultZoom: number;
    defaultPosition: [number, number];
    translateExtent?: TranslateExtent;
    arrowHeadColor: string;
    markerEndId?: string;
    zoomOnScroll?: boolean;
    zoomOnDoubleClick?: boolean;
    paneMoveable?: boolean;
}
declare const _default: React.MemoExoticComponent<{
    ({ nodeTypes, edgeTypes, onMove, onMoveStart, onMoveEnd, onLoad, onElementClick, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onNodeDragStart, onNodeDragStop, onSelectionDragStart, onSelectionDrag, onSelectionDragStop, onSelectionContextMenu, connectionLineType, connectionLineStyle, connectionLineComponent, selectionKeyCode, onElementsRemove, deleteKeyCode, elements, onConnect, onConnectStart, onConnectStop, onConnectEnd, snapToGrid, snapGrid, onlyRenderVisibleNodes, nodesDraggable, nodesConnectable, elementsSelectable, selectNodesOnDrag, minZoom, maxZoom, defaultZoom, defaultPosition, translateExtent, arrowHeadColor, markerEndId, zoomOnScroll, zoomOnDoubleClick, paneMoveable, onPaneClick, onPaneScroll, onPaneContextMenu, }: GraphViewProps): JSX.Element;
    displayName: string;
}>;
export default _default;
