import { StoreModel } from './index';
export declare const useStoreActions: <Result>(mapActions: (actions: import("easy-peasy").ActionMapper<{
    zoom: import("easy-peasy").Thunk<StoreModel, number, any, StoreModel, any>;
    onConnect?: import("..").OnConnectFunc;
    onConnectStart?: import("..").OnConnectStartFunc;
    onConnectStop?: import("..").OnConnectStopFunc;
    onConnectEnd?: import("..").OnConnectEndFunc;
    selectedNodesBbox: import("..").Rect;
    d3Zoom: import("d3-zoom").ZoomBehavior<Element, unknown>;
    d3Selection: import("d3-selection").Selection<Element, unknown, null, undefined>;
    userSelectionRect: import("..").SelectionRect;
    connectionPosition: import("..").XYPosition;
    setConnectionPending: import("easy-peasy").Action<StoreModel, boolean>;
    setOnConnect: import("easy-peasy").Action<StoreModel, import("..").OnConnectFunc>;
    setOnConnectStart: import("easy-peasy").Action<StoreModel, import("..").OnConnectStartFunc>;
    setOnConnectStop: import("easy-peasy").Action<StoreModel, import("..").OnConnectStopFunc>;
    setOnConnectEnd: import("easy-peasy").Action<StoreModel, import("..").OnConnectEndFunc>;
    setElements: import("easy-peasy").Action<StoreModel, import("..").Elements>;
    updateNodeDimensions: import("easy-peasy").Action<StoreModel, {
        id: string;
        nodeElement: HTMLDivElement;
    }>;
    updateNodePos: import("easy-peasy").Action<StoreModel, import("..").NodePosUpdate>;
    updateNodePosDiff: import("easy-peasy").Action<StoreModel, import("..").NodeDiffUpdate>;
    setSelection: import("easy-peasy").Action<StoreModel, boolean>;
    unsetNodesSelection: import("easy-peasy").Action<StoreModel, void>;
    setSelectedElements: import("easy-peasy").Action<StoreModel, import("..").Elements | import("..").Node | import("..").Edge>;
    updateTransform: import("easy-peasy").Action<StoreModel, {
        x: number;
        y: number;
        k: number;
    }>;
    setInitTransform: import("easy-peasy").Action<StoreModel, {
        x: number;
        y: number;
        k: number;
    }>;
    updateSize: import("easy-peasy").Action<StoreModel, import("..").Dimensions>;
    initD3: import("easy-peasy").Action<StoreModel, {
        zoomPane: Element;
        defaultPosition: [number, number];
        defaultZoom: number;
        translateExtent?: import("..").TranslateExtent;
    }>;
    setMinZoom: import("easy-peasy").Action<StoreModel, number>;
    setMaxZoom: import("easy-peasy").Action<StoreModel, number>;
    setTranslateExtent: import("easy-peasy").Action<StoreModel, import("..").TranslateExtent>;
    setSnapToGrid: import("easy-peasy").Action<StoreModel, boolean>;
    setSnapGrid: import("easy-peasy").Action<StoreModel, import("..").SnapGrid>;
    setConnectionPosition: import("easy-peasy").Action<StoreModel, import("..").XYPosition>;
    setConnectionNodeId: import("easy-peasy").Action<StoreModel, import("..").SetConnectionId>;
    setInteractive: import("easy-peasy").Action<StoreModel, boolean>;
    setNodesDraggable: import("easy-peasy").Action<StoreModel, boolean>;
    setNodesConnectable: import("easy-peasy").Action<StoreModel, boolean>;
    setElementsSelectable: import("easy-peasy").Action<StoreModel, boolean>;
    setUserSelection: import("easy-peasy").Action<StoreModel, import("..").XYPosition>;
    updateUserSelection: import("easy-peasy").Action<StoreModel, import("..").XYPosition>;
    unsetUserSelection: import("easy-peasy").Action<StoreModel, void>;
    fitView: import("easy-peasy").Action<StoreModel, import("..").FitViewParams>;
    zoomTo: import("easy-peasy").Action<StoreModel, number>;
    zoomIn: import("easy-peasy").Thunk<StoreModel, void, any, {}, any>;
    zoomOut: import("easy-peasy").Thunk<StoreModel, void, any, {}, any>;
}, "1">) => Result) => Result;
export declare const useStoreDispatch: () => import("easy-peasy").Dispatch<StoreModel, import("redux").Action<any>>;
export declare const useStoreState: <Result>(mapState: (state: import("easy-peasy").StateMapper<{
    height: number;
    transform: import("..").Transform;
    width: number;
    elements: import("..").Elements;
    onConnect?: import("..").OnConnectFunc;
    onConnectStart?: import("..").OnConnectStartFunc;
    onConnectStop?: import("..").OnConnectStopFunc;
    onConnectEnd?: import("..").OnConnectEndFunc;
    snapToGrid: boolean;
    snapGrid: import("..").SnapGrid;
    nodesDraggable: boolean;
    nodesConnectable: boolean;
    elementsSelectable: boolean;
    minZoom: number;
    maxZoom: number;
    translateExtent: import("..").TranslateExtent;
    viewportBox: import("easy-peasy").Computed<StoreModel, import("..").Rect, {}>;
    elementsMap: import("easy-peasy").Computed<StoreModel, {
        [key: string]: import("..").FlowElement;
    }, {}>;
    nodes: import("easy-peasy").Computed<StoreModel, import("..").Node[], {}>;
    edges: import("easy-peasy").Computed<StoreModel, import("..").Edge[], {}>;
    selectedElements: import("..").Elements;
    selectedNodesBbox: import("..").Rect;
    d3Zoom: import("d3-zoom").ZoomBehavior<Element, unknown>;
    d3Selection: import("d3-selection").Selection<Element, unknown, null, undefined>;
    d3Initialised: boolean;
    nodesSelectionActive: boolean;
    selectionActive: boolean;
    userSelectionRect: import("..").SelectionRect;
    connectionPending: boolean;
    connectionNodeId: string;
    connectionOnlyNodeId: import("easy-peasy").Computed<StoreModel, string, {}>;
    connectionOnlyPortId: import("easy-peasy").Computed<StoreModel, string, {}>;
    connectionHandleType: import("..").HandleType;
    connectionPosition: import("..").XYPosition;
    reactFlowVersion: string;
}, "1">) => Result, equalityFn?: (prev: Result, next: Result) => boolean) => Result;
export declare const useStore: () => import("easy-peasy").Store<StoreModel, any>;
