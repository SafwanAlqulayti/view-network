!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["network-policy-viewer"]=t():e["network-policy-viewer"]=t()}(self,(function(){return(()=>{"use strict";var e={770:e=>{e.exports=require("@welldone-software/why-did-you-render")}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{n.r(o),n.d(o,{NetworkPolicyViewer:()=>mn});const e=require("react");var t=n.n(e);const r=require("react-hint");var a=n.n(r);const s=require("@emotion/styled");var i=n.n(s);const l=i().div`
    position: absolute;
    height: fit-content;
    left: 25%;
    top: 10%;
    color: #721c24;
    background-color: #f8d7da;
    border-color: #f5c6cb;
    padding: .75rem 1.25rem;
    border: 1px solid transparent;
    border-radius: .25rem;
    z-index: 1000;
`;function c({text:e}){return e?t().createElement(l,null,e):null}const d=require("dagre"),u=require("js-yaml"),m=require("uuid");class p{constructor(e,t,n){this.source=`${e.getNode().id}__${e.id}`,this.sourceNodeId=e.getNode().id,this.target=`${t.getNode().id}__${t.id}`,this.targetNodeId=t.getNode().id,n||(n="e"+(0,m.v4)()),this.id=n}}var g;!function(e){e.SOURCE="source",e.TARGET="target"}(g||(g={}));class f{constructor(e,t,n){this.name=e,this.type=t,n||(n="p"+(0,m.v4)()),this.id=n,this.uid=n,this.deny=!1}setNode(e){this.node=e}getNode(){return this.node}}class h extends f{constructor(e,t){super(e,g.TARGET,t)}}class y{constructor(e,t){this.data={isPartOfNetworkPolicy:!1,name:"",ports:[]},this.data.name=e,t||(t="n"+(0,m.v4)()),this.id=t}setPosition(e,t){this.position={x:e,y:t}}addPort(e){return e.setNode(this),this.data.ports.push(e),e}getPortWithName(e){return this.data.ports.find((t=>t.name===e))}setPorts(e){this.data.ports=[],e.forEach((e=>{e.setNode(this),this.data.ports.push(e)}))}getPorts(){return this.data.ports}}class v extends f{constructor(e,t){super(e,g.SOURCE,t)}}class b{constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.name=e.name,this.generateName=e.generateName,this.namespace=e.namespace,this.selfLink=e.selfLink,this.uid=e.uid,this.resourceVersion=e.resourceVersion,this.generation=e.generation,this.creationTimestamp=this.convertValues(e.creationTimestamp,T),this.deletionTimestamp=this.convertValues(e.deletionTimestamp,T),this.deletionGracePeriodSeconds=e.deletionGracePeriodSeconds,this.labels=e.labels,this.annotations=e.annotations,this.ownerReferences=this.convertValues(e.ownerReferences,k),this.finalizers=e.finalizers,this.clusterName=e.clusterName,this.managedFields=this.convertValues(e.managedFields,$)}static createFrom(e={}){return new b(e)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class w{constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.ports=this.convertValues(e.ports,N),this.to=this.convertValues(e.to,S)}static createFrom(e={}){return new w(e)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class E{constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.cidr=e.cidr,this.except=e.except}static createFrom(e={}){return new E(e)}}class S{constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.podSelector=this.convertValues(e.podSelector,P),this.namespaceSelector=this.convertValues(e.namespaceSelector,P),this.ipBlock=this.convertValues(e.ipBlock,E)}static createFrom(e={}){return new S(e)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class x{static createFrom(e={}){return new x(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e))}}class N{constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.protocol=e.protocol||"TCP",this.port=this.convertValues(e.port,x)}static createFrom(e={}){return new N(e)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class _{constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.ports=this.convertValues(e.ports,N),this.from=this.convertValues(e.from,S)}static createFrom(e={}){return new _(e)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class C{constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.key=e.key,this.operator=e.operator,this.values=e.values}static createFrom(e={}){return new C(e)}}class P{constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.matchLabels=e.matchLabels,this.matchExpressions=this.convertValues(e.matchExpressions,C)}static createFrom(e={}){return new P(e)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class M{constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.podSelector=this.convertValues(e.podSelector,P),this.ingress=this.convertValues(e.ingress,_),this.egress=this.convertValues(e.egress,w),this.policyTypes=e.policyTypes}static createFrom(e={}){return new M(e)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class O{static createFrom(e={}){return new O(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e))}}class ${constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.manager=e.manager,this.operation=e.operation,this.apiVersion=e.apiVersion,this.time=this.convertValues(e.time,T),this.fieldsType=e.fieldsType,this.fieldsV1=this.convertValues(e.fieldsV1,O)}static createFrom(e={}){return new $(e)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class k{constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.apiVersion=e.apiVersion,this.kind=e.kind,this.name=e.name,this.uid=e.uid,this.controller=e.controller,this.blockOwnerDeletion=e.blockOwnerDeletion}static createFrom(e={}){return new k(e)}}class T{static createFrom(e={}){return new T(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e))}}class B{constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.kind=e.kind,this.apiVersion=e.apiVersion,this.metadata=this.convertValues(e.metadata,b),this.ownerReferences=this.convertValues(e.ownerReferences,k),this.managedFields=this.convertValues(e.managedFields,$),this.spec=this.convertValues(e.spec,M)}static createFrom(e={}){return new B(e)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}function I(e,t){let n;if(e.ipBlock)n=`IPs - ${e.ipBlock.cidr}`,e.ipBlock.except&&0!==e.ipBlock.except.length&&(n+=`, except ${e.ipBlock.except.join(", ")}`);else{n="Pods ";const o=[],r=L(e.podSelector);r&&0!==r.length?o.push(`with label ${r.join(", ")}`):void 0!==e.podSelector&&(n="All pods ");const a=L(e.namespaceSelector);a&&0!==a.length?o.push(`in namespace with labels ${a.join(", ")}`):void 0!==e.namespaceSelector&&o.push("in any namespace"),o.length>0?n+=o.join(" and "):n+=`in namespace ${t}`}return new y(n)}function D(e){const t=function(e){const t=[],n=e.spec.policyTypes?e.spec.policyTypes:["Ingress"],o=e.metadata.namespace||"default",r=L(e.spec.podSelector);let a=new y(`All pods in namespace - ${e.metadata.namespace||"default"}`);return r&&(a=new y(`Pods with label - ${r.join(" ")}`)),a.data.isPartOfNetworkPolicy=!0,t.push(a),n.includes("Ingress")&&t.push(...function(e,t,n){const o=[];if(e||(e=[]),0===e.length){const e=new h("Any In");e.deny=!0,t.addPort(e)}for(const r of e){if(!r.ports&&!r.from){const e=new y("ALLOW FROM ALL"),n=e.addPort(new v("Out")),o=new h("Any In");return t.setPorts([o]),[e,new p(n,o)]}const e=[];if(r.ports)r.ports.forEach((n=>{const o=`:${n.port} ${n.protocol}`;let r=t.getPortWithName(o);r||(r=new h(o),t.addPort(r)),e.push(r)}));else{const n="Any In";let o=t.getPortWithName(n);o||(o=new h(n),t.addPort(o)),e.push(o)}const a=[],s=[];r.from.forEach((e=>{const t=I(e,n);s.push(t.addPort(new v("Out"))),a.push(t)}));const i=[];s.forEach((t=>{e.forEach((e=>{i.push(new p(t,e))}))})),o.push(...a,...i)}return o}(e.spec.ingress,a,o)),n.includes("Egress")&&t.push(...function(e,t,n,o){var r;const a=[];let s=t.getPortWithName("Out");s||(s=new v("Out"),t.addPort(s)),e||(e=[]),0===e.length&&(s.deny=!0);for(const t of e){const e=[];if(!t.to){const t=new y("ALLOW TO ALL");e.push(t)}let n=[];t.ports?t.ports.forEach((e=>{const t=`:${e.port} ${e.protocol}`;n.push(t)})):n.push("Any In"),null===(r=t.to)||void 0===r||r.forEach((t=>{const n=I(t,o);e.push(n)}));const i=[];e.forEach((e=>{n.forEach(((t,n)=>{let o=e.getPortWithName(t);o||(o=new h(t),e.addPort(o)),i.push(o)}))}));const l=[];i.forEach((e=>{l.push(new p(s,e))})),a.push(...e,...l)}return a}(e.spec.egress,a,0,o)),t}(e);return function(e){const t=new d.graphlib.Graph({});t.setGraph({rankdir:"LR",nodesep:100,ranksep:100,ranker:"longest-path",marginx:25,marginy:25}),t.setDefaultEdgeLabel((function(){return{}})),e.forEach((e=>{e instanceof y&&t.setNode(e.id,{width:Math.max(150,7*e.data.name.length),height:Math.max(40,20+15*e.data.ports.length)})})),e.forEach((e=>{e instanceof p&&t.setEdge(e.sourceNodeId,e.targetNodeId)})),d.layout(t);const n={};t.nodes().forEach((e=>{const o=t.node(e);n[e]={x:o.x,y:o.y}})),e.forEach((e=>{if(e instanceof y){const t=n[e.id];e.setPosition(t.x,t.y)}}))}(t),t}function L(e){if(!e||!e.matchLabels)return;const t=[];return Object.keys(e.matchLabels).forEach((n=>{t.push(`${n}=${e.matchLabels[n]}`)})),t}const R=require("classcat");var V=n.n(R);const j=require("easy-peasy"),z=(0,j.createTypedHooks)(),Y=z.useStoreActions,X=(z.useStoreDispatch,z.useStoreState),H=z.useStore,F=require("resize-observer"),A=e=>{const t=null==e?void 0:e.target;return["INPUT","SELECT","TEXTAREA","BUTTON"].includes(null==t?void 0:t.nodeName)||(null==t?void 0:t.hasAttribute("contenteditable"))},Z=e=>({width:e.offsetWidth,height:e.offsetHeight}),G=(e,t=0,n=1)=>Math.min(Math.max(e,t),n),K=t=>{const[n,o]=(0,e.useState)(!1);function r(e){e.keyCode!==t||A(e)||o(!0)}const a=e=>{e.keyCode!==t||A(e)||o(!1)};return(0,e.useEffect)((()=>(window.addEventListener("keydown",r),window.addEventListener("keyup",a),()=>{window.removeEventListener("keydown",r),window.removeEventListener("keyup",a)})),[]),n},W=require("fast-deep-equal");var q=n.n(W);const U=require("d3-zoom"),J=require("d3-selection"),Q=(e,t,n,o)=>{const r=t.querySelectorAll(e);return r&&r.length?Array.from(r).map((e=>{const t=e.getBoundingClientRect(),r=Z(e),a=e.getAttribute("data-nodeid"),s=e.getAttribute("data-handlepos"),i=a?a.split("__"):null;let l=null;return i&&(l=i.length?i[1]:i),Object.assign({id:l,position:s,x:(t.left-n.left)*(1/o),y:(t.top-n.top)*(1/o)},r)})):null},ee={width:0,height:0,viewportBox:(0,j.computed)((e=>({x:0,y:0,width:e.width,height:e.height}))),transform:[0,0,1],elements:[],elementsMap:(0,j.computed)((e=>e.elements.reduce(((e,t)=>(e[t.id]=t,e)),{}))),nodes:(0,j.computed)((e=>e.elements.filter((e=>oe(e))))),edges:(0,j.computed)((e=>e.elements.filter((e=>ne(e))))),selectedElements:null,selectedNodesBbox:{x:0,y:0,width:0,height:0},d3Zoom:null,d3Selection:null,d3Initialised:!1,minZoom:.5,maxZoom:2,translateExtent:[[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY]],nodesSelectionActive:!1,selectionActive:!1,userSelectionRect:{startX:0,startY:0,x:0,y:0,width:0,height:0,draw:!1},connectionPending:!1,connectionNodeId:null,connectionOnlyNodeId:(0,j.computed)((e=>{var t,n;return null===(n=null===(t=e.connectionNodeId)||void 0===t?void 0:t.split("__"))||void 0===n?void 0:n[0]})),connectionOnlyPortId:(0,j.computed)((e=>{var t,n;return null===(n=null===(t=e.connectionNodeId)||void 0===t?void 0:t.split("__"))||void 0===n?void 0:n[1]})),connectionHandleType:"source",connectionPosition:{x:0,y:0},snapGrid:[15,15],snapToGrid:!1,nodesDraggable:!0,nodesConnectable:!0,elementsSelectable:!0,reactFlowVersion:"undefined"!=typeof __REACT_FLOW_VERSION__?__REACT_FLOW_VERSION__:"-",setConnectionPending:(0,j.action)(((e,t)=>{e.connectionPending=t})),setOnConnect:(0,j.action)(((e,t)=>{e.onConnect=t})),setOnConnectStart:(0,j.action)(((e,t)=>{e.onConnectStart=t})),setOnConnectStop:(0,j.action)(((e,t)=>{e.onConnectStop=t})),setOnConnectEnd:(0,j.action)(((e,t)=>{e.onConnectEnd=t})),setElements:(0,j.action)(((e,t)=>{e.elements=t})),updateNodeDimensions:(0,j.action)(((e,{id:t,nodeElement:n})=>{const o=Z(n),r=e.nodes.find((e=>e.id===t));if(!r||r.__rf.width===o.width&&r.__rf.height===o.height)return;const a=n.getBoundingClientRect(),s={source:Q(".source",n,a,e.transform[2]),target:Q(".target",n,a,e.transform[2])};e.elements.forEach((e=>{e.id===t&&oe(e)&&(e.__rf.width=o.width,e.__rf.height=o.height,e.__rf.handleBounds=s)}))})),updateNodePos:(0,j.action)(((e,{id:t,pos:n})=>{let o=n;if(e.snapToGrid){const[t,r]=e.snapGrid;o={x:t*Math.round(n.x/t),y:r*Math.round(n.y/r)}}e.elements.forEach((e=>{e.id===t&&oe(e)&&(e.__rf.position=o)}))})),updateNodePosDiff:(0,j.action)(((e,{id:t,diff:n=null,isDragging:o=!0})=>{e.elements.forEach((e=>{e.id===t&&oe(e)&&(n&&(e.__rf.position={x:e.__rf.position.x+n.x,y:e.__rf.position.y+n.y}),e.__rf.isDragging=o)}))})),setUserSelection:(0,j.action)(((e,t)=>{e.userSelectionRect={width:0,height:0,startX:t.x,startY:t.y,x:t.x,y:t.y,draw:!0},e.selectionActive=!0})),updateUserSelection:(0,j.action)(((e,t)=>{const n=e.userSelectionRect.startX||0,o=e.userSelectionRect.startY||0,r=t.x<n,a=t.y<o,s=Object.assign(Object.assign({},e.userSelectionRect),{x:r?t.x:e.userSelectionRect.x,y:a?t.y:e.userSelectionRect.y,width:r?n-t.x:t.x-n,height:a?o-t.y:t.y-o}),i=ce(e.nodes,s,e.transform),l=de(i,e.edges),c=[...i,...l],d=!q()(c,e.selectedElements);e.userSelectionRect=s,d&&(e.selectedElements=c.length>0?c:null)})),unsetUserSelection:(0,j.action)((e=>{var t;const n=null===(t=e.selectedElements)||void 0===t?void 0:t.filter(oe);if(!n)return e.selectionActive=!1,e.userSelectionRect.draw=!1,e.nodesSelectionActive=!1,void(e.selectedElements=null);const o=le(n);e.nodesSelectionActive=!0,e.selectedNodesBbox=o,e.userSelectionRect.draw=!1,e.selectionActive=!1})),setSelection:(0,j.action)(((e,t)=>{e.selectionActive=t})),unsetNodesSelection:(0,j.action)((e=>{e.nodesSelectionActive=!1,e.selectedElements=null})),setSelectedElements:(0,j.action)(((e,t)=>{const n=Array.isArray(t)?t:[t],o=q()(n,e.selectedElements)?e.selectedElements:n;e.selectedElements=o})),updateTransform:(0,j.action)(((e,t)=>{e.transform[0]=t.x,e.transform[1]=t.y,e.transform[2]=t.k})),setInitTransform:(0,j.action)(((e,t)=>{if(e.transform[0]=t.x,e.transform[1]=t.y,e.transform[2]=t.k,e.d3Selection){const n=U.zoomIdentity.translate(t.x,t.y).scale(t.k);e.d3Selection.property("__zoom",n)}})),updateSize:(0,j.action)(((e,t)=>{e.width=t.width||500,e.height=t.height||500})),initD3:(0,j.action)(((e,{zoomPane:t,defaultPosition:n,defaultZoom:o,translateExtent:r})=>{const a=void 0!==r?r:e.translateExtent,s=(0,U.zoom)().scaleExtent([e.minZoom,e.maxZoom]).translateExtent(a),i=(0,J.select)(t).call(s),l=G(n[0],a[0][0],a[1][0]),c=G(n[1],a[0][1],a[1][1]),d=G(o,e.minZoom,e.maxZoom),u=U.zoomIdentity.translate(l,c).scale(d);i.property("__zoom",u),e.transform[0]=l,e.transform[1]=c,e.transform[2]=d,e.d3Zoom=s,e.d3Selection=i,e.d3Initialised=!0})),setMinZoom:(0,j.action)(((e,t)=>{e.minZoom=t,e.d3Zoom&&e.d3Zoom.scaleExtent([t,e.maxZoom])})),setMaxZoom:(0,j.action)(((e,t)=>{e.maxZoom=t,e.d3Zoom&&e.d3Zoom.scaleExtent([e.minZoom,t])})),setTranslateExtent:(0,j.action)(((e,t)=>{e.translateExtent=t,e.d3Zoom&&e.d3Zoom.translateExtent(t)})),setConnectionPosition:(0,j.action)(((e,t)=>{e.connectionPosition=t})),setConnectionNodeId:(0,j.action)(((e,{connectionNodeId:t,connectionHandleType:n})=>{e.connectionNodeId=t,e.connectionHandleType=n})),setSnapToGrid:(0,j.action)(((e,t)=>{e.snapToGrid=t})),setSnapGrid:(0,j.action)(((e,t)=>{e.snapGrid[0]=t[0],e.snapGrid[1]=t[1]})),setInteractive:(0,j.action)(((e,t)=>{e.nodesDraggable=t,e.nodesConnectable=t,e.elementsSelectable=t})),setNodesDraggable:(0,j.action)(((e,t)=>{e.nodesDraggable=t})),setNodesConnectable:(0,j.action)(((e,t)=>{e.nodesConnectable=t})),setElementsSelectable:(0,j.action)(((e,t)=>{e.elementsSelectable=t})),fitView:(0,j.action)(((e,t={padding:.1})=>{const{padding:n}=t,{nodes:o,width:r,height:a,d3Selection:s,minZoom:i,maxZoom:l}=e;if(!s||!o.length)return;const c=le(o),d=r/(c.width*(1+n)),u=a/(c.height*(1+n)),m=Math.min(d,u),p=G(m,i,l),g=[r/2-(c.x+c.width/2)*p,a/2-(c.y+c.height/2)*p],f=U.zoomIdentity.translate(g[0],g[1]).scale(p);s.property("__zoom",f),e.transform[0]=f.x,e.transform[1]=f.y,e.transform[2]=f.k})),zoomTo:(0,j.action)(((e,t)=>{const{d3Selection:n,transform:o,minZoom:r,maxZoom:a}=e,s=G(t,r,a);if(n){const t=[e.width/2,e.height/2],r=[(t[0]-o[0])/o[2],(t[1]-o[1])/o[2]],a=t[0]-r[0]*s,i=t[1]-r[1]*s,l=U.zoomIdentity.translate(a,i).scale(s);n.property("__zoom",l),e.transform[0]=l.x,e.transform[1]=l.y,e.transform[2]=l.k}})),zoom:(0,j.thunk)(((e,t,n)=>{const{transform:o}=n.getState(),r=o[2]+t;e.zoomTo(r)})),zoomIn:(0,j.thunk)((e=>{e.zoom(.2)})),zoomOut:(0,j.thunk)((e=>{e.zoom(-.2)}))},te=(0,j.createStore)(ee,{devTools:!1}),ne=e=>"id"in e&&"source"in e&&"target"in e,oe=e=>"id"in e&&!("source"in e)&&!("target"in e),re=e=>t=>{const{transform:n,snapToGrid:o,snapGrid:r}=e.getState();return(({x:e,y:t},[n,o,r],a,[s,i])=>{const l={x:(e-n)/r,y:(t-o)/r};return a?{x:s*Math.round(l.x/s),y:i*Math.round(l.y/i)}:l})(t,n,o,r)},ae=(e,t)=>({x:Math.min(e.x,t.x),y:Math.min(e.y,t.y),x2:Math.max(e.x2,t.x2),y2:Math.max(e.y2,t.y2)}),se=({x:e,y:t,width:n,height:o})=>({x:e,y:t,x2:e+n,y2:t+o}),ie=({x:e,y:t,x2:n,y2:o})=>({x:e,y:t,width:n-e,height:o-t}),le=e=>{const t=e.reduce(((e,{__rf:{position:t,width:n,height:o}={}})=>ae(e,se(Object.assign(Object.assign({},t),{width:n,height:o})))),{x:1/0,y:1/0,x2:-1/0,y2:-1/0});return ie(t)},ce=(e,t,[n,o,r]=[0,0,1],a=!1)=>{const s=se({x:(t.x-n)/r,y:(t.y-o)/r,width:t.width/r,height:t.height/r});return e.filter((({__rf:{position:e,width:t,height:n,isDragging:o}})=>{const r=se(Object.assign(Object.assign({},e),{width:t,height:n})),i=Math.max(0,Math.min(s.x2,r.x2)-Math.max(s.x,r.x))*Math.max(0,Math.min(s.y2,r.y2)-Math.max(s.y,r.y));return!(null!==t&&null!==n&&!o)||(a?i>0:i>=t*n)}))},de=(e,t)=>{const n=e.map((e=>e.id));return t.filter((e=>{const t=e.source.split("__")[0],o=e.target.split("__")[0];return n.includes(t)||n.includes(o)}))},ue=e=>()=>{const{nodes:t=[],edges:n=[]}=e.getState();return((e,t)=>[...e.map((e=>{const t=Object.assign({},e);return delete t.__rf,t})),...t.map((e=>Object.assign({},e)))])(t,n)},me=(e,t)=>e.x!==t.x||e.y!==t.y||e.zoom!==t.k,pe=e=>({x:e.x,y:e.y,zoom:e.k});function ge(e){const t=e.target.closest(".react-flow");if(!t)return;const n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}const fe=()=>{const e=X((e=>e.userSelectionRect));return e.draw?t().createElement("div",{className:"react-flow__selection",style:{width:e.width,height:e.height,transform:`translate(${e.x}px, ${e.y}px)`}}):null},he=(0,e.memo)((({selectionKeyPressed:e})=>{const n=X((e=>e.selectionActive)),o=X((e=>e.elementsSelectable)),r=Y((e=>e.setUserSelection)),a=Y((e=>e.updateUserSelection)),s=Y((e=>e.unsetUserSelection)),i=Y((e=>e.unsetNodesSelection));return o&&(n||e)?t().createElement("div",{className:"react-flow__selectionpane",onMouseDown:e=>{const t=ge(e);t&&r(t)},onMouseMove:t=>{if(!e||!n)return;const o=ge(t);o&&a(o)},onMouseUp:()=>s(),onMouseLeave:()=>{s(),i()}},t().createElement(fe,null)):null})),ye=require("react-draggable");var ve=n.n(ye);const be=({onSelectionDragStart:n,onSelectionDrag:o,onSelectionDragStop:r,onSelectionContextMenu:a})=>{const[s,i,l]=X((e=>e.transform)),c=X((e=>e.selectedNodesBbox)),d=X((e=>e.selectionActive)),u=X((e=>e.selectedElements)),m=X((e=>e.snapToGrid)),p=X((e=>e.snapGrid)),g=X((e=>e.nodes)),f=Y((e=>e.updateNodePosDiff)),h=(0,e.useRef)(null),y=(0,e.useMemo)((()=>m?p:[1,1]),[m,p]),v=(0,e.useMemo)((()=>u?u.filter(oe).map((e=>g.find((t=>t.id===e.id)))):[]),[u]),b=(0,e.useMemo)((()=>({transform:`translate(${s}px,${i}px) scale(${l})`})),[s,i,l]),w=(0,e.useMemo)((()=>({width:c.width,height:c.height,top:c.y,left:c.x})),[c]),E=(0,e.useCallback)((e=>{null==n||n(e,v)}),[n,v]),S=(0,e.useCallback)(((e,t)=>{o&&o(e,v),null==v||v.forEach((e=>{f({id:e.id,diff:{x:t.deltaX,y:t.deltaY}})}))}),[o,v,f]),x=(0,e.useCallback)((e=>{null==v||v.forEach((e=>{f({id:e.id,isDragging:!1})})),null==r||r(e,v)}),[v,r]),N=(0,e.useCallback)((e=>{const t=u?u.filter(oe).map((e=>g.find((t=>t.id===e.id)))):[];null==a||a(e,t)}),[a]);return!u||d?null:t().createElement("div",{className:"react-flow__nodesselection",style:b},t().createElement(ve(),{scale:l,grid:y,onStart:e=>E(e),onDrag:(e,t)=>S(e,t),onStop:e=>x(e),nodeRef:h},t().createElement("div",{ref:h,className:"react-flow__nodesselection-rect",onContextMenu:N,style:w})))},we=({children:n,onPaneClick:o,onPaneContextMenu:r,onPaneScroll:a,onElementsRemove:s,deleteKeyCode:i,onMove:l,onMoveStart:c,onMoveEnd:d,selectionKeyCode:u,zoomOnScroll:m,zoomOnDoubleClick:p,paneMoveable:g,defaultPosition:f,defaultZoom:h,translateExtent:y,onSelectionDragStart:v,onSelectionDrag:b,onSelectionDragStop:w,onSelectionContextMenu:E})=>{const S=(0,e.useRef)(null),x=Y((e=>e.unsetNodesSelection)),N=X((e=>e.nodesSelectionActive)),_=K(u);(t=>{const n=Y((e=>e.updateSize));(0,e.useEffect)((()=>{let e;const o=()=>{if(!t.current)return;const e=Z(t.current);0!==e.height&&0!==e.width||console.warn("The React Flow parent container needs a width and a height to render the graph."),n(e)};return o(),window.onresize=o,t.current&&(e=new F.ResizeObserver((()=>o())),e.observe(t.current)),()=>{window.onresize=null,e&&t.current&&e.unobserve(t.current)}}),[])})(S),(({deleteKeyCode:t,onElementsRemove:n})=>{const o=X((e=>e.selectedElements)),r=X((e=>e.edges)),a=Y((e=>e.unsetNodesSelection)),s=K(t);(0,e.useEffect)((()=>{if(n&&s&&o){let e=o;if(1===o.length&&oe(o[0])){const t=o[0],n=de([t],r);e=[...o,...n]}n(e),a()}}),[s])})({onElementsRemove:s,deleteKeyCode:i}),(({zoomPane:t,onMove:n,onMoveStart:o,onMoveEnd:r,zoomOnScroll:a=!0,zoomOnDoubleClick:s=!0,selectionKeyPressed:i,paneMoveable:l=!0,defaultPosition:c=[0,0],defaultZoom:d=1,translateExtent:u})=>{const m=(0,e.useRef)({x:0,y:0,zoom:0}),p=X((e=>e.d3Zoom)),g=Y((e=>e.initD3)),f=Y((e=>e.updateTransform));(0,e.useEffect)((()=>{t.current&&g({zoomPane:t.current,defaultPosition:c,defaultZoom:d,translateExtent:u})}),[]),(0,e.useEffect)((()=>{p&&(i?p.on("zoom",null):p.on("zoom",(e=>{if(f(e.transform),n){const t=pe(e.transform);n(t)}})))}),[i,p,f,n]),(0,e.useEffect)((()=>{p&&(o?p.on("start",(e=>{if(me(m.current,e.transform)){const t=pe(e.transform);m.current=t,o(t)}})):p.on("start",null))}),[p,o]),(0,e.useEffect)((()=>{p&&(r?p.on("end",(e=>{if(me(m.current,e.transform)){const t=pe(e.transform);m.current=t,r(t)}})):p.on("end",null))}),[p,r]),(0,e.useEffect)((()=>{p&&p.filter((e=>!(i||e.target.closest(".react-flow__node")&&"wheel"!==e.type||e.target.closest(".react-flow__nodesselection")&&"wheel"!==e.type||!l||!a&&"wheel"===e.type||!s&&"dblclick"===e.type||e.ctrlKey||e.button)))}),[p,a,s,l,i])})({zoomPane:S,onMove:l,onMoveStart:c,onMoveEnd:d,selectionKeyPressed:_,zoomOnScroll:m,zoomOnDoubleClick:p,paneMoveable:g,defaultPosition:f,defaultZoom:h,translateExtent:y});const C=(0,e.useCallback)((e=>{null==o||o(e),x()}),[o]),P=(0,e.useCallback)((e=>{null==r||r(e)}),[r]),M=(0,e.useCallback)((e=>{null==a||a(e)}),[a]);return t().createElement("div",{className:"react-flow__renderer",ref:S},n,t().createElement(he,{selectionKeyPressed:_}),N&&t().createElement(be,{onSelectionDragStart:v,onSelectionDrag:b,onSelectionDragStop:w,onSelectionContextMenu:E}),t().createElement("div",{className:"react-flow__pane",onClick:C,onContextMenu:P,onWheel:M}))};we.displayName="FlowRenderer";const Ee=(0,e.memo)(we),Se=e=>{const n=X((e=>e.nodes)),o=X((e=>e.transform)),r=X((e=>e.selectedElements)),a=X((e=>e.viewportBox)),s=X((e=>e.nodesDraggable)),i=X((e=>e.nodesConnectable)),l=X((e=>e.elementsSelectable)),c={transform:`translate(${o[0]}px,${o[1]}px) scale(${o[2]})`},d=e.onlyRenderVisibleNodes?ce(n,a,o,!0):n;return t().createElement("div",{className:"react-flow__nodes",style:c},d.map((n=>function(e,n,o,r,a,s,i){const l=e.type||"default",c=n.nodeTypes[l]||n.nodeTypes.default;n.nodeTypes[l]||console.warn(`Node type "${l}" not found. Using fallback type "default".`);const d=!!r&&r.some((({id:t})=>t===e.id)),u=!!(e.draggable||a&&void 0===e.draggable),m=!!(e.selectable||i&&void 0===e.selectable),p=!!(e.connectable||s&&void 0===e.connectable),g=null!==e.__rf.width&&null!==e.__rf.height;return t().createElement(c,{key:e.id,id:e.id,type:l,data:e.data,xPos:e.__rf.position.x,yPos:e.__rf.position.y,isDragging:e.__rf.isDragging,onClick:n.onElementClick,onMouseEnter:n.onNodeMouseEnter,onMouseMove:n.onNodeMouseMove,onMouseLeave:n.onNodeMouseLeave,onContextMenu:n.onNodeContextMenu,onNodeDragStart:n.onNodeDragStart,onNodeDragStop:n.onNodeDragStop,transform:o,selected:d,style:e.style,className:e.className,isDraggable:u,isSelectable:m,isConnectable:p,sourcePosition:e.sourcePosition,targetPosition:e.targetPosition,selectNodesOnDrag:n.selectNodesOnDrag,isHidden:e.isHidden,isInitialized:g,snapGrid:n.snapGrid,snapToGrid:n.snapToGrid})}(n,e,o,r,s,i,l))))};Se.displayName="NodeRenderer";const xe=(0,e.memo)(Se),Ne=(0,e.memo)((({x:n,y:o,label:r,labelStyle:a={},labelShowBg:s=!0,labelBgStyle:i={},labelBgPadding:l=[2,4],labelBgBorderRadius:c=2})=>{const d=(0,e.useRef)(null),[u,m]=(0,e.useState)({x:0,y:0,width:0,height:0});return(0,e.useEffect)((()=>{if(d.current){const e=d.current.getBBox();m({x:e.x,y:e.y,width:e.width,height:e.height})}}),[]),void 0!==r&&r?t().createElement("g",{transform:`translate(${n-u.width/2} ${o-u.height/2})`},s&&t().createElement("rect",{width:u.width+2*l[0],x:-l[0],y:-l[1],height:u.height+2*l[1],className:"react-flow__edge-textbg",style:i,rx:c,ry:c}),t().createElement("text",{className:"react-flow__edge-text",y:u.height/2,dy:"0.3em",ref:d,style:a},r)):null})),_e=(e,t)=>void 0!==t&&t?`url(#${t})`:void 0!==e?`url(#react-flow__${e})`:"none",Ce=({sourceX:e,sourceY:t,targetX:n,targetY:o})=>{const r=Math.abs(n-e)/2,a=n<e?n+r:n-r,s=Math.abs(o-t)/2;return[a,o<t?o+s:o-s,r,s]};var Pe,Me,Oe,$e;function ke({sourceX:e,sourceY:t,sourcePosition:n=Pe.Bottom,targetX:o,targetY:r,targetPosition:a=Pe.Top,centerX:s,centerY:i}){const[l,c]=Ce({sourceX:e,sourceY:t,targetX:o,targetY:r}),d=[Pe.Left,Pe.Right],u=void 0!==s?s:l,m=void 0!==i?i:c;let p=`M${e},${t} C${e},${m} ${o},${m} ${o},${r}`;return d.includes(n)&&d.includes(a)?p=`M${e},${t} C${u},${t} ${u},${r} ${o},${r}`:d.includes(a)?p=`M${e},${t} C${e},${r} ${e},${r} ${o},${r}`:d.includes(n)&&(p=`M${e},${t} C${o},${t} ${o},${t} ${o},${r}`),p}!function(e){e.Left="left",e.Top="top",e.Right="right",e.Bottom="bottom"}(Pe||(Pe={})),function(e){e.Arrow="arrow",e.ArrowClosed="arrowclosed"}(Me||(Me={})),function(e){e.Lines="lines",e.Dots="dots"}(Oe||(Oe={})),function(e){e.Bezier="default",e.Straight="straight",e.Step="step",e.SmoothStep="smoothstep"}($e||($e={}));const Te=(0,e.memo)((({sourceX:e,sourceY:n,targetX:o,targetY:r,sourcePosition:a=Pe.Bottom,targetPosition:s=Pe.Top,label:i,labelStyle:l,labelShowBg:c,labelBgStyle:d,labelBgPadding:u,labelBgBorderRadius:m,style:p,arrowHeadType:g,markerEndId:f})=>{const[h,y]=Ce({sourceX:e,sourceY:n,targetX:o,targetY:r}),v=ke({sourceX:e,sourceY:n,sourcePosition:a,targetX:o,targetY:r,targetPosition:s}),b=i?t().createElement(Ne,{x:h,y,label:i,labelStyle:l,labelShowBg:c,labelBgStyle:d,labelBgPadding:u,labelBgBorderRadius:m}):null,w=_e(g,f);return t().createElement(t().Fragment,null,t().createElement("path",{style:p,d:v,className:"react-flow__edge-path",markerEnd:w}),b)})),Be=(e,t,n)=>`L ${e},${t-n}Q ${e},${t} ${e+n},${t}`,Ie=(e,t,n)=>`L ${e},${t-n}Q ${e},${t} ${e-n},${t}`,De=(e,t,n)=>`L ${e-n},${t}Q ${e},${t} ${e},${t-n}`,Le=(e,t,n)=>`L ${e},${t+n}Q ${e},${t} ${e+n},${t}`,Re=(e,t,n)=>`L ${e},${t+n}Q ${e},${t} ${e-n},${t}`,Ve=(e,t,n)=>`L ${e-n},${t}Q ${e},${t} ${e},${t+n}`;function je({sourceX:e,sourceY:t,sourcePosition:n=Pe.Bottom,targetX:o,targetY:r,targetPosition:a=Pe.Top,borderRadius:s=5,centerX:i,centerY:l}){const[c,d,u,m]=Ce({sourceX:e,sourceY:t,targetX:o,targetY:r}),p=Math.min(s,Math.abs(o-e)),g=Math.min(s,Math.abs(r-t)),f=Math.min(p,g,u,m),h=[Pe.Left,Pe.Right];let y=null,v=null;const b=void 0!==i?i:c,w=void 0!==l?l:d;return e<=o?(y=t<=r?Be(e,w,f):Le(e,w,f),v=t<=r?Ve(o,w,f):De(o,w,f)):(y=t<r?Ie(e,w,f):Re(e,w,f),v=t<r?((e,t,n)=>`L ${e+n},${t}Q ${e},${t} ${e},${t+n}`)(o,w,f):((e,t,n)=>`L ${e+n},${t}Q ${e},${t} ${e},${t-n}`)(o,w,f)),h.includes(n)&&h.includes(a)?e<=o&&(y=t<=r?Ve(b,t,f):De(b,t,f),v=t<=r?Be(b,r,f):Le(b,r,f)):h.includes(n)&&!h.includes(a)?(y=e<=o?t<=r?Ve(o,t,f):De(o,t,f):t<=r?Ie(e,r,f):Re(e,r,f),v=""):!h.includes(n)&&h.includes(a)&&(y=e<=o?t<=r?Be(e,r,f):Le(e,r,f):t<=r?Ie(e,r,f):Re(e,r,f),v=""),`M ${e},${t}${y}${v}L ${o},${r}`}const ze=(0,e.memo)((({sourceX:e,sourceY:n,targetX:o,targetY:r,label:a,labelStyle:s,labelShowBg:i,labelBgStyle:l,labelBgPadding:c,labelBgBorderRadius:d,style:u,sourcePosition:m=Pe.Bottom,targetPosition:p=Pe.Top,arrowHeadType:g,markerEndId:f,borderRadius:h=5})=>{const[y,v]=Ce({sourceX:e,sourceY:n,targetX:o,targetY:r}),b=je({sourceX:e,sourceY:n,sourcePosition:m,targetX:o,targetY:r,targetPosition:p,borderRadius:h}),w=_e(g,f),E=a?t().createElement(Ne,{x:y,y:v,label:a,labelStyle:s,labelShowBg:i,labelBgStyle:l,labelBgPadding:c,labelBgBorderRadius:d}):null;return t().createElement(t().Fragment,null,t().createElement("path",{style:u,className:"react-flow__edge-path",d:b,markerEnd:w}),E)})),Ye=({connectionNodeId:n,connectionHandleType:o,connectionLineStyle:r,connectionPositionX:a,connectionPositionY:s,connectionLineType:i=$e.Bezier,nodes:l=[],transform:c,isConnectable:d,CustomConnectionLineComponent:u})=>{const[m,p]=(0,e.useState)(null),g=n.includes("__"),f=n.split("__"),h=f[0],y=g?f[1]:null;if((0,e.useEffect)((()=>{const e=l.find((e=>e.id===h))||null;p(e)}),[]),!m||!d)return null;const v=y?m.__rf.handleBounds[o].find((e=>e.id===y)):m.__rf.handleBounds[o][0],b=v?v.x+v.width/2:m.__rf.width/2,w=v?v.y+v.height/2:m.__rf.height,E=m.__rf.position.x+b,S=m.__rf.position.y+w,x=(a-c[0])/c[2],N=(s-c[1])/c[2],_=(null==v?void 0:v.position)===Pe.Left||(null==v?void 0:v.position)===Pe.Right?Pe.Left:Pe.Top;if(u)return t().createElement("g",{className:"react-flow__connection"},t().createElement(u,{sourceX:E,sourceY:S,sourcePosition:null==v?void 0:v.position,targetX:x,targetY:N,targetPosition:_,connectionLineType:i,connectionLineStyle:r}));let C="";return C=i===$e.Bezier?ke({sourceX:E,sourceY:S,sourcePosition:null==v?void 0:v.position,targetX:x,targetY:N,targetPosition:_}):i===$e.Step?je({sourceX:E,sourceY:S,sourcePosition:null==v?void 0:v.position,targetX:x,targetY:N,targetPosition:_,borderRadius:0}):i===$e.SmoothStep?je({sourceX:E,sourceY:S,sourcePosition:null==v?void 0:v.position,targetX:x,targetY:N,targetPosition:_}):`M${E},${S} ${x},${N}`,t().createElement("g",{className:"react-flow__connection"},t().createElement("path",{d:C,className:"react-flow__connection-path",style:r}))},Xe=({id:e,children:n})=>t().createElement("marker",{className:"react-flow__arrowhead",id:e,markerWidth:"12.5",markerHeight:"12.5",viewBox:"-10 -10 20 20",orient:"auto",refX:"0",refY:"0"},n),He=({color:e})=>t().createElement("defs",null,t().createElement(Xe,{id:"react-flow__arrowclosed"},t().createElement("polyline",{stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"1",fill:e,points:"-5,-4 0,0 -5,4 -5,-4"})),t().createElement(Xe,{id:"react-flow__arrow"},t().createElement("polyline",{stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"1.5",fill:"none",points:"-5,-4 0,0 -5,4"})));He.displayName="MarkerDefinitions";const Fe=He;function Ae(e,t,n=null){if(!n)switch(e){case Pe.Top:return{x:t.__rf.width/2,y:0};case Pe.Right:return{x:t.__rf.width,y:t.__rf.height/2};case Pe.Bottom:return{x:t.__rf.width/2,y:t.__rf.height};case Pe.Left:return{x:0,y:t.__rf.height/2}}switch(e){case Pe.Top:return{x:n.x+n.width/2,y:n.y};case Pe.Right:return{x:n.x+n.width,y:n.y+n.height/2};case Pe.Bottom:return{x:n.x+n.width/2,y:n.y+n.height};case Pe.Left:return{x:n.x,y:n.y+n.height/2}}}function Ze(e,t){let n=null;return e?(1!==e.length&&t?t&&(n=e.find((e=>e.id===t))):n=e[0],n):null}const Ge=e=>{const[n,o,r]=X((e=>e.transform)),a=X((e=>e.edges)),s=X((e=>e.nodes)),i=X((e=>e.connectionNodeId)),l=X((e=>e.connectionHandleType)),c=X((e=>e.connectionPosition)),d=X((e=>e.selectedElements)),u=X((e=>e.nodesConnectable)),m=X((e=>e.elementsSelectable)),p=X((e=>e.width)),g=X((e=>e.height)),{connectionLineType:f,arrowHeadColor:h,connectionLineStyle:y,connectionLineComponent:v}=e;if(!p)return null;const b=`translate(${n},${o}) scale(${r})`,w=i&&l;return t().createElement("svg",{width:p,height:g,className:"react-flow__edges"},t().createElement(Fe,{color:h}),t().createElement("g",{transform:b},a.map((n=>function(e,n,o,r,a){const[s,i]=e.source.split("__"),[l,c]=e.target.split("__"),d=o.find((e=>e.id===s)),u=o.find((e=>e.id===l));if(!d)throw new Error(`couldn't create edge for source id: ${s}`);if(!u)throw new Error(`couldn't create edge for target id: ${l}`);if(!d.__rf.width||!d.__rf.height)return null;const m=e.type||"default",p=n.edgeTypes[m]||n.edgeTypes.default,g=Ze(d.__rf.handleBounds.source,i),f=Ze(u.__rf.handleBounds.target,c),h=g?g.position:Pe.Bottom,y=f?f.position:Pe.Top,{sourceX:v,sourceY:b,targetX:w,targetY:E}=function(e,t,n,o,r,a){const s=Ae(n,e,t),i=e.__rf.position.x+s.x,l=e.__rf.position.y+s.y,c=Ae(a,o,r);return{sourceX:i,sourceY:l,targetX:o.__rf.position.x+c.x,targetY:o.__rf.position.y+c.y}}(d,g,h,u,f,y),S=!!r&&r.some((t=>ne(t)&&t.id===e.id));return t().createElement(p,{key:e.id,id:e.id,className:e.className,type:e.type,data:e.data,onClick:n.onElementClick,selected:S,animated:e.animated,label:e.label,labelStyle:e.labelStyle,labelShowBg:e.labelShowBg,labelBgStyle:e.labelBgStyle,labelBgPadding:e.labelBgPadding,labelBgBorderRadius:e.labelBgBorderRadius,style:e.style,arrowHeadType:e.arrowHeadType,source:e.source,target:e.target,sourceHandleId:i,targetHandleId:c,sourceX:v,sourceY:b,targetX:w,targetY:E,sourcePosition:h,targetPosition:y,elementsSelectable:a,markerEndId:n.markerEndId,isHidden:e.isHidden})}(n,e,s,d,m))),w&&t().createElement(Ye,{nodes:s,connectionNodeId:i,connectionHandleType:l,connectionPositionX:c.x,connectionPositionY:c.y,transform:[n,o,r],connectionLineStyle:y,connectionLineType:f,isConnectable:u,CustomConnectionLineComponent:v})))};Ge.displayName="EdgeRenderer";const Ke=(0,e.memo)(Ge),We=({nodeTypes:n,edgeTypes:o,onMove:r,onMoveStart:a,onMoveEnd:s,onLoad:i,onElementClick:l,onNodeMouseEnter:c,onNodeMouseMove:d,onNodeMouseLeave:u,onNodeContextMenu:m,onNodeDragStart:p,onNodeDragStop:g,onSelectionDragStart:f,onSelectionDrag:h,onSelectionDragStop:y,onSelectionContextMenu:v,connectionLineType:b,connectionLineStyle:w,connectionLineComponent:E,selectionKeyCode:S,onElementsRemove:x,deleteKeyCode:N,elements:_,onConnect:C,onConnectStart:P,onConnectStop:M,onConnectEnd:O,snapToGrid:$,snapGrid:k,onlyRenderVisibleNodes:T,nodesDraggable:B,nodesConnectable:I,elementsSelectable:D,selectNodesOnDrag:L=!0,minZoom:R,maxZoom:V,defaultZoom:j,defaultPosition:z,translateExtent:F,arrowHeadColor:A,markerEndId:Z,zoomOnScroll:G,zoomOnDoubleClick:K,paneMoveable:W,onPaneClick:U,onPaneScroll:J,onPaneContextMenu:Q})=>{const ee=(0,e.useRef)(!1),te=X((e=>e.d3Initialised)),ae=Y((e=>e.setOnConnect)),se=Y((e=>e.setOnConnectStart)),ie=Y((e=>e.setOnConnectStop)),le=Y((e=>e.setOnConnectEnd)),ce=Y((e=>e.setSnapGrid)),de=Y((e=>e.setSnapToGrid)),me=Y((e=>e.setNodesDraggable)),pe=Y((e=>e.setNodesConnectable)),ge=Y((e=>e.setElementsSelectable)),fe=Y((e=>e.setInitTransform)),he=Y((e=>e.setMinZoom)),ye=Y((e=>e.setMaxZoom)),ve=Y((e=>e.setTranslateExtent)),be=Y((e=>e.fitView)),we=Y((e=>e.zoom)),Se=Y((e=>e.zoomTo)),Ne=H();return(t=>{const n=X((e=>e.elements)),o=Y((e=>e.setElements));(0,e.useEffect)((()=>{const e=t.map((e=>{const t=n.find((t=>{var n;return t.id===(null===(n=e.id)||void 0===n?void 0:n.toString())}));if(t){const n=q()(t.data,e.data)?t.data:Object.assign(Object.assign({},t.data),e.data),o=q()(t.style,e.style)?t.style:Object.assign(Object.assign({},t.style),e.style),r=Object.assign({},t);if(void 0!==n&&(r.data=n),void 0!==o&&(r.style=o),void 0!==e.className&&(r.className=e.className),void 0!==e.isHidden&&(r.isHidden=e.isHidden),void 0!==e.type&&(r.type=e.type,oe(t)&&e.type!==t.type&&(t.__rf.width=null,t.__rf.height=null)),oe(t)){const n=e,o=r;return(t.position.x!==n.position.x||t.position.y!==n.position.y)&&(o.__rf=Object.assign(Object.assign({},t.__rf),{position:n.position}),o.position=n.position),void 0!==n.draggable&&(o.draggable=n.draggable),void 0!==n.selectable&&(o.selectable=n.selectable),void 0!==n.connectable&&(o.connectable=n.connectable),o}if(ne(t)){const n=e,o=r,a=q()(t.labelStyle,n.labelStyle)?t.labelStyle:Object.assign(Object.assign({},t.labelStyle),n.labelStyle),s=q()(t.labelBgStyle,n.labelBgStyle)?t.labelBgStyle:Object.assign(Object.assign({},t.labelBgStyle),n.labelBgStyle);return void 0!==n.label&&(o.label=n.label),void 0!==a&&(o.labelStyle=a),void 0!==n.labelShowBg&&(o.labelShowBg=n.labelShowBg),void 0!==n.labelBgPadding&&(o.labelBgPadding=n.labelBgPadding),void 0!==n.labelBgBorderRadius&&(o.labelBgBorderRadius=n.labelBgBorderRadius),void 0!==s&&(o.labelBgStyle=s),void 0!==n.animated&&(o.animated=n.animated),void 0!==n.arrowHeadType&&(o.arrowHeadType=n.arrowHeadType),o}}return(e=>{if(!e.id)throw new Error("All nodes and edges need to have an id.");return ne(e)?Object.assign(Object.assign({},e),{source:e.source.toString(),target:e.target.toString(),id:e.id.toString(),type:e.type||"default"}):Object.assign(Object.assign({},e),{id:e.id.toString(),type:e.type||"default",__rf:{position:e.position,width:null,height:null,handleBounds:{},isDragging:!1}})})(e)}));!q()(n,e)&&o(e)}),[t,n])})(_),(0,e.useEffect)((()=>{!ee.current&&te&&(i&&i({fitView:(e={padding:.1})=>be(e),zoomIn:()=>we(.2),zoomOut:()=>we(-.2),zoomTo:e=>Se(e),project:re(Ne),getElements:ue(Ne),setTransform:e=>fe({x:e.x,y:e.y,k:e.zoom})}),ee.current=!0)}),[te,i]),(0,e.useEffect)((()=>{C&&ae(C)}),[C]),(0,e.useEffect)((()=>{P&&se(P)}),[P]),(0,e.useEffect)((()=>{M&&ie(M)}),[M]),(0,e.useEffect)((()=>{O&&le(O)}),[O]),(0,e.useEffect)((()=>{void 0!==$&&de($)}),[$]),(0,e.useEffect)((()=>{void 0!==k&&ce(k)}),[k]),(0,e.useEffect)((()=>{void 0!==B&&me(B)}),[B]),(0,e.useEffect)((()=>{void 0!==I&&pe(I)}),[I]),(0,e.useEffect)((()=>{void 0!==D&&ge(D)}),[D]),(0,e.useEffect)((()=>{void 0!==R&&he(R)}),[R]),(0,e.useEffect)((()=>{void 0!==V&&ye(V)}),[V]),(0,e.useEffect)((()=>{void 0!==F&&ve(F)}),[F]),t().createElement(Ee,{onPaneClick:U,onPaneContextMenu:Q,onPaneScroll:J,onElementsRemove:x,deleteKeyCode:N,selectionKeyCode:S,onMove:r,onMoveStart:a,onMoveEnd:s,zoomOnScroll:G,zoomOnDoubleClick:K,paneMoveable:W,defaultPosition:z,defaultZoom:j,translateExtent:F,onSelectionDragStart:f,onSelectionDrag:h,onSelectionDragStop:y,onSelectionContextMenu:v},t().createElement(xe,{nodeTypes:n,onElementClick:l,onNodeMouseEnter:c,onNodeMouseMove:d,onNodeMouseLeave:u,onNodeContextMenu:m,onNodeDragStop:g,onNodeDragStart:p,onlyRenderVisibleNodes:T,selectNodesOnDrag:L,snapToGrid:$,snapGrid:k}),t().createElement(Ke,{edgeTypes:o,onElementClick:l,connectionLineType:b,connectionLineStyle:w,arrowHeadColor:A,markerEndId:Z,connectionLineComponent:E}))};We.displayName="GraphView";const qe=(0,e.memo)(We);const Ue=e=>{var{type:n,nodeId:o,onConnect:r,onConnectStart:a,onConnectStop:s,onConnectEnd:i,position:l,setConnectionPending:c,setConnectionNodeId:d,setPosition:u,className:m,id:p=!1,isValidConnection:g}=e,f=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(e,o[r])&&(n[o[r]]=e[o[r]])}return n}(e,["type","nodeId","onConnect","onConnectStart","onConnectStop","onConnectEnd","position","setConnectionPending","setConnectionNodeId","setPosition","className","id","isValidConnection"]);const h="target"===n,y=V()(["react-flow__handle",`react-flow__handle-${l}`,"nodrag",m,{source:!h,target:h}]),v=p?`${o}__${p}`:o;return t().createElement("div",Object.assign({"data-nodeid":v,"data-handlepos":l,className:y,onMouseDown:e=>function(e,t,n,o,r,a,s,i,l,c,d){const u=e.target.closest(".react-flow");if(!u)return;const m=s?"target":"source",p=u.getBoundingClientRect();let g;function f(){g&&(g.classList.remove("react-flow__handle-valid"),g.classList.remove("react-flow__handle-invalid"))}function h(e){var n,o;const r=document.elementFromPoint(e.clientX,e.clientY),a={elementBelow:r,isValid:!1,connection:{source:null,sourceNodeId:null,targetNodeId:null,target:null,toTarget:null},isHoveringHandle:!1},l=r&&r.classList.contains("target"),c=r&&r.classList.contains("source");if(l||c){let e;const c=r.getAttribute("data-nodeid"),d=null===(n=c.split("__"))||void 0===n?void 0:n[0],u=null===(o=t.split("__"))||void 0===o?void 0:o[0];e=s?{source:c,sourceNodeId:d,target:t,targetNodeId:u,toTarget:l}:{source:t,sourceNodeId:u,target:c,targetNodeId:d,toTarget:l};const m=i(e);a.connection=e,a.isValid=m,a.isHoveringHandle=!0}return a}function y(e){r({x:e.clientX-p.left,y:e.clientY-p.top});const{connection:t,elementBelow:n,isValid:o,isHoveringHandle:a}=h(e);if(!a)return f();t.source!==t.target&&n&&(g=n,n.classList.toggle("react-flow__handle-valid",o),n.classList.toggle("react-flow__handle-invalid",!o))}r({x:e.clientX-p.left,y:e.clientY-p.top}),n(!0),o({connectionNodeId:t,connectionHandleType:m}),l&&l(e,{nodeId:t,handleType:m}),document.addEventListener("mousemove",y),document.addEventListener("mouseup",(function e(t){const{connection:r,isValid:s}=h(t);c&&c(t),s&&a&&a(r),d&&d(t),f(),n(!1),o({connectionNodeId:null,connectionHandleType:null}),document.removeEventListener("mousemove",y),document.removeEventListener("mouseup",e)}))}(e,v,c,d,u,r,h,g,a,s,i)},f))};Ue.displayName="BaseHandle";const Je=(0,e.memo)(Ue),Qe=(0,e.createContext)(null),et=Qe.Provider,tt=(Qe.Consumer,Qe),nt=({type:n="source",position:o=Pe.Top,isValidConnection:r=(()=>!0),isConnectable:a=!0,style:s,className:i,id:l,onConnect:c})=>{const d=(0,e.useContext)(tt),u=Y((e=>e.setConnectionPending)),m=Y((e=>e.setConnectionPosition)),p=Y((e=>e.setConnectionNodeId)),g=X((e=>e.onConnect)),f=X((e=>e.onConnectStart)),h=X((e=>e.onConnectStop)),y=X((e=>e.onConnectEnd)),v=V()([i,{connectable:a}]);return t().createElement(Je,{className:v,id:l,nodeId:d,setConnectionPending:u,setPosition:m,setConnectionNodeId:p,onConnect:e=>{g&&g(e),c&&c(e)},onConnectStart:f,onConnectStop:h,onConnectEnd:y,type:n,position:o,isValidConnection:r,style:s})};nt.displayName="Handle";const ot=(0,e.memo)(nt),rt=({data:e,isConnectable:n,targetPosition:o=Pe.Top,sourcePosition:r=Pe.Bottom})=>t().createElement(t().Fragment,null,t().createElement(ot,{type:"target",position:o,isConnectable:n}),e.label,t().createElement(ot,{type:"source",position:r,isConnectable:n}));rt.displayName="DefaultNode";const at=(0,e.memo)(rt),st=({data:e,isConnectable:n,sourcePosition:o=Pe.Bottom})=>t().createElement(t().Fragment,null,e.label,t().createElement(ot,{type:"source",position:o,isConnectable:n}));st.displayName="InputNode";const it=(0,e.memo)(st),lt=({data:e,isConnectable:n,targetPosition:o=Pe.Top})=>t().createElement(t().Fragment,null,t().createElement(ot,{type:"target",position:o,isConnectable:n}),e.label);lt.displayName="OutputNode";const ct=(0,e.memo)(lt),dt=n=>{const o=({id:o,type:r,data:a,transform:s,xPos:i,yPos:l,selected:c,onClick:d,onMouseEnter:u,onMouseMove:m,onMouseLeave:p,onContextMenu:g,onNodeDragStart:f,onNodeDragStop:h,style:y,className:v,isDraggable:b,isSelectable:w,isConnectable:E,selectNodesOnDrag:S,sourcePosition:x,targetPosition:N,isHidden:_,isInitialized:C,snapToGrid:P,snapGrid:M,isDragging:O})=>{const $=Y((e=>e.updateNodeDimensions)),k=Y((e=>e.setSelectedElements)),T=Y((e=>e.updateNodePosDiff)),B=Y((e=>e.unsetNodesSelection)),I=(0,e.useRef)(null),D=(0,e.useMemo)((()=>({id:o,type:r,position:{x:i,y:l},data:a})),[o,r,i,l,a]),L=(0,e.useMemo)((()=>P?M:[1,1]),[P,M]),R=(0,e.useMemo)((()=>Object.assign({zIndex:c?10:3,transform:`translate(${i}px,${l}px)`,pointerEvents:w||b||d?"all":"none",opacity:C?1:0},y)),[c,i,l,w,b,d,C,y]),j=(0,e.useMemo)((()=>{if(u&&!O)return e=>u(e,D)}),[u,O,D]),z=(0,e.useMemo)((()=>{if(m&&!O)return e=>m(e,D)}),[m,O,D]),X=(0,e.useMemo)((()=>{if(p&&!O)return e=>p(e,D)}),[p,O,D]),H=(0,e.useMemo)((()=>{if(g)return e=>g(e,D)}),[g,D]),A=(0,e.useCallback)((e=>{b||(w&&(B(),k({id:D.id,type:D.type})),null==d||d(e,D))}),[w,b,d,D]),Z=(0,e.useCallback)((e=>{null==f||f(e,D),S&&w&&(B(),k({id:D.id,type:D.type}))}),[D,S,w,f]),G=(0,e.useCallback)(((e,t)=>{T({id:o,diff:{x:t.deltaX,y:t.deltaY}})}),[o]),K=(0,e.useCallback)((e=>{if(!O)return w&&!S&&k({id:D.id,type:D.type}),void(null==d||d(e,D));T({id:o,isDragging:!1}),null==h||h(e,D)}),[D,w,S,d,h,O]);if((0,e.useEffect)((()=>{if(I.current&&!_){$({id:o,nodeElement:I.current});const e=new F.ResizeObserver((()=>{I.current&&$({id:o,nodeElement:I.current})}));return e.observe(I.current),()=>{e&&I.current&&e.unobserve(I.current)}}}),[o,_]),_)return null;const W=V()(["react-flow__node",`react-flow__node-${r}`,v,{selected:c,selectable:w}]);return t().createElement(ye.DraggableCore,{onStart:Z,onDrag:G,onStop:K,scale:s[2],disabled:!b,cancel:".nodrag",nodeRef:I,grid:L},t().createElement("div",{className:W,ref:I,style:R,onMouseEnter:j,onMouseMove:z,onMouseLeave:X,onContextMenu:H,onClick:A},t().createElement(et,{value:o},t().createElement(n,{id:o,data:a,type:r,selected:c,isConnectable:E,sourcePosition:x,targetPosition:N}))))};return o.displayName="NodeWrapper",(0,e.memo)(o)},ut=({onSelectionChange:t})=>{const n=X((e=>e.selectedElements));return(0,e.useEffect)((()=>{t(n)}),[n]),null},mt=(0,e.memo)((e=>t().createElement(ze,Object.assign({},e,{borderRadius:0})))),pt=(0,e.memo)((({sourceX:e,sourceY:n,targetX:o,targetY:r,label:a,labelStyle:s,labelShowBg:i,labelBgStyle:l,labelBgPadding:c,labelBgBorderRadius:d,style:u,arrowHeadType:m,markerEndId:p})=>{const g=Math.abs(r-n)/2,f=r<n?r+g:r-g,h=Math.abs(o-e)/2,y=o<e?o+h:o-h,v=_e(m,p),b=a?t().createElement(Ne,{x:y,y:f,label:a,labelStyle:s,labelShowBg:i,labelBgStyle:l,labelBgPadding:c,labelBgBorderRadius:d}):null;return t().createElement(t().Fragment,null,t().createElement("path",{style:u,className:"react-flow__edge-path",d:`M ${e},${n}L ${o},${r}`,markerEnd:v}),b)})),gt=n=>{const o=({id:o,className:r,type:a,data:s,onClick:i,selected:l,animated:c,label:d,labelStyle:u,labelShowBg:m,labelBgStyle:p,labelBgPadding:g,labelBgBorderRadius:f,style:h,arrowHeadType:y,source:v,target:b,sourceX:w,sourceY:E,targetX:S,targetY:x,sourcePosition:N,targetPosition:_,elementsSelectable:C,markerEndId:P,isHidden:M})=>{const O=Y((e=>e.setSelectedElements)),$=!C&&!i,k=V()(["react-flow__edge",`react-flow__edge-${a}`,r,{selected:l,animated:c,inactive:$}]),T=(0,e.useCallback)((e=>{if(C&&O({id:o,source:v,target:b}),i){const t={id:o,source:v,target:b,type:a};void 0!==s&&(t.data=s),i(e,t)}}),[C,o,v,b,a,s,i]);return M?null:t().createElement("g",{className:k,onClick:T},t().createElement(n,{id:o,source:v,target:b,selected:l,animated:c,label:d,labelStyle:u,labelShowBg:m,labelBgStyle:p,labelBgPadding:g,labelBgBorderRadius:f,data:s,style:h,arrowHeadType:y,sourceX:w,sourceY:E,targetX:S,targetY:x,sourcePosition:N,targetPosition:_,markerEndId:P}))};return o.displayName="EdgeWrapper",(0,e.memo)(o)},ft=({children:e})=>{var n;const o=(0,j.useStore)();return(null===(n=null==o?void 0:o.getState())||void 0===n?void 0:n.reactFlowVersion)?t().createElement(t().Fragment,null,e):t().createElement(j.StoreProvider,{store:te},e)};ft.displayName="ReactFlowWrapper";const ht=ft;const yt={input:it,default:at,output:ct},vt={default:Te,straight:pt,step:mt,smoothstep:ze},bt=n=>{var{elements:o=[],className:r,nodeTypes:a=yt,edgeTypes:s=vt,onElementClick:i,onLoad:l,onMove:c,onMoveStart:d,onMoveEnd:u,onElementsRemove:m,onConnect:p,onConnectStart:g,onConnectStop:f,onConnectEnd:h,onNodeMouseEnter:y,onNodeMouseMove:v,onNodeMouseLeave:b,onNodeContextMenu:w,onNodeDragStart:E,onNodeDragStop:S,onSelectionChange:x,onSelectionDragStart:N,onSelectionDrag:_,onSelectionDragStop:C,onSelectionContextMenu:P,connectionLineType:M=$e.Bezier,connectionLineStyle:O,connectionLineComponent:$,deleteKeyCode:k=8,selectionKeyCode:T=16,snapToGrid:B=!1,snapGrid:I=[15,15],onlyRenderVisibleNodes:D=!0,selectNodesOnDrag:L=!0,nodesDraggable:R,nodesConnectable:j,elementsSelectable:z,minZoom:Y,maxZoom:X,defaultZoom:H=1,defaultPosition:F=[0,0],translateExtent:A,arrowHeadColor:Z="#b1b1b7",markerEndId:G,zoomOnScroll:K=!0,zoomOnDoubleClick:W=!0,paneMoveable:q=!0,onPaneClick:U,onPaneScroll:J,onPaneContextMenu:Q,children:ee}=n,te=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(e,o[r])&&(n[o[r]]=e[o[r]])}return n}(n,["elements","className","nodeTypes","edgeTypes","onElementClick","onLoad","onMove","onMoveStart","onMoveEnd","onElementsRemove","onConnect","onConnectStart","onConnectStop","onConnectEnd","onNodeMouseEnter","onNodeMouseMove","onNodeMouseLeave","onNodeContextMenu","onNodeDragStart","onNodeDragStop","onSelectionChange","onSelectionDragStart","onSelectionDrag","onSelectionDragStop","onSelectionContextMenu","connectionLineType","connectionLineStyle","connectionLineComponent","deleteKeyCode","selectionKeyCode","snapToGrid","snapGrid","onlyRenderVisibleNodes","selectNodesOnDrag","nodesDraggable","nodesConnectable","elementsSelectable","minZoom","maxZoom","defaultZoom","defaultPosition","translateExtent","arrowHeadColor","markerEndId","zoomOnScroll","zoomOnDoubleClick","paneMoveable","onPaneClick","onPaneScroll","onPaneContextMenu","children"]);const ne=(0,e.useMemo)((()=>function(e){const t={input:dt(e.input||it),default:dt(e.default||at),output:dt(e.output||ct)},n=Object.keys(e).filter((e=>!["input","default","output"].includes(e))).reduce(((t,n)=>(t[n]=dt(e[n]||at),t)),{});return Object.assign(Object.assign({},t),n)}(a)),[]),oe=(0,e.useMemo)((()=>function(e){const t={default:gt(e.default||Te),straight:gt(e.bezier||pt),step:gt(e.step||mt),smoothstep:gt(e.step||ze)},n=Object.keys(e).filter((e=>!["default","bezier"].includes(e))).reduce(((t,n)=>(t[n]=gt(e[n]||Te),t)),{});return Object.assign(Object.assign({},t),n)}(s)),[]),re=V()(["react-flow",r]);return t().createElement("div",Object.assign({},te,{className:re}),t().createElement(ht,null,t().createElement(qe,{onLoad:l,onMove:c,onMoveStart:d,onMoveEnd:u,onElementClick:i,onNodeMouseEnter:y,onNodeMouseMove:v,onNodeMouseLeave:b,onNodeContextMenu:w,onNodeDragStart:E,onNodeDragStop:S,nodeTypes:ne,edgeTypes:oe,connectionLineType:M,connectionLineStyle:O,connectionLineComponent:$,selectionKeyCode:T,onElementsRemove:m,deleteKeyCode:k,elements:o,onConnect:p,onConnectStart:g,onConnectStop:f,onConnectEnd:h,snapToGrid:B,snapGrid:I,onlyRenderVisibleNodes:D,nodesDraggable:R,nodesConnectable:j,elementsSelectable:z,selectNodesOnDrag:L,minZoom:Y,maxZoom:X,defaultZoom:H,defaultPosition:F,translateExtent:A,arrowHeadColor:Z,markerEndId:G,zoomOnScroll:K,zoomOnDoubleClick:W,paneMoveable:q,onPaneClick:U,onPaneScroll:J,onPaneContextMenu:Q,onSelectionDragStart:N,onSelectionDrag:_,onSelectionDragStop:C,onSelectionContextMenu:P}),x&&t().createElement(ut,{onSelectionChange:x}),ee))};bt.displayName="ReactFlow";const wt=bt,Et=({x:e,y:n,width:o,height:r,style:a,color:s,strokeColor:i,className:l,borderRadius:c})=>{const{background:d,backgroundColor:u}=a||{},m=s||d||u;return t().createElement("rect",{className:V()(["react-flow__minimap-node",l]),x:e,y:n,rx:c,ry:c,width:o,height:r,fill:m,stroke:i,strokeWidth:2})};Et.displayName="MiniMapNode";const St=(0,e.memo)(Et),xt=({style:e,className:n,nodeStrokeColor:o="#555",nodeColor:r="#fff",nodeClassName:a="",nodeBorderRadius:s=5,maskColor:i="#F0F2F3"})=>{const l=X((e=>e.width)),c=X((e=>e.height)),[d,u,m]=X((e=>e.transform)),p=X((e=>e.nodes)),g=V()(["react-flow__minimap",n]),f=(null==e?void 0:e.width)||200,h=(null==e?void 0:e.height)||150,y=r instanceof Function?r:()=>r,v=o instanceof Function?o:()=>o,b=a instanceof Function?a:()=>a,w=p&&p.length,E=le(p),S={x:-d/m,y:-u/m,width:l/m,height:c/m},x=w?(N=S,ie(ae(se(E),se(N)))):S;var N;const _=x.width/f,C=x.height/h,P=Math.max(_,C),M=P*f,O=P*h,$=5*P,k=x.x-(M-x.width)/2-$,T=x.y-(O-x.height)/2-$,B=M+2*$,I=O+2*$;return t().createElement("svg",{width:f,height:h,viewBox:`${k} ${T} ${B} ${I}`,style:e,className:g},p.filter((e=>!e.isHidden)).map((e=>t().createElement(St,{key:e.id,x:e.__rf.position.x,y:e.__rf.position.y,width:e.__rf.width,height:e.__rf.height,style:e.style,className:b(e),color:y(e),borderRadius:s,strokeColor:v(e)}))),t().createElement("path",{className:"react-flow__minimap-mask",d:`M${k-$},${T-$}h${B+2*$}v${I+2*$}h${-B-2*$}z\n        M${S.x},${S.y}h${S.width}v${S.height}h${-S.width}z`,fill:i,fillRule:"evenodd"}))};var Nt;function _t(){return _t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},_t.apply(this,arguments)}xt.displayName="MiniMap",(0,e.memo)(xt);const Ct=function(t){return e.createElement("svg",_t({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},t),Nt||(Nt=e.createElement("path",{d:"M416 277.333H277.333V416h-42.666V277.333H96v-42.666h138.667V96h42.666v138.667H416v42.666z"})))};var Pt;function Mt(){return Mt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},Mt.apply(this,arguments)}const Ot=function(t){return e.createElement("svg",Mt({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},t),Pt||(Pt=e.createElement("path",{d:"M96 235h320v42H96z"})))};var $t;function kt(){return kt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},kt.apply(this,arguments)}const Tt=function(t){return e.createElement("svg",kt({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},t),$t||($t=e.createElement("path",{d:"M96 124.2c0-6.9 5.2-12.2 12.2-12.2H176V64h-66.8C75.7 64 48 90.7 48 124.2V192h48v-67.8zM403.6 64H336v48h67.2c6.9 0 12.8 5.2 12.8 12.2V192h48v-67.8c0-33.5-27-60.2-60.4-60.2zM416 386.8c0 6.9-5.2 12.2-12.2 12.2H336v49h67.8c33.5 0 60.2-27.7 60.2-61.2V320h-48v66.8zM108.2 399c-6.9 0-12.2-5.2-12.2-12.2V320H48v66.8c0 33.5 27.7 61.2 61.2 61.2H176v-49h-67.8z"})))};var Bt;function It(){return It=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},It.apply(this,arguments)}const Dt=function(t){return e.createElement("svg",It({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},t),Bt||(Bt=e.createElement("path",{d:"M376 186h-20v-40c0-55-45-100-100-100S156 91 156 146v40h-20c-22.002 0-40 17.998-40 40v200c0 22.002 17.998 40 40 40h240c22.002 0 40-17.998 40-40V226c0-22.002-17.998-40-40-40zM256 368c-22.002 0-40-17.998-40-40s17.998-40 40-40 40 17.998 40 40-17.998 40-40 40zm62.002-182H193.998v-40c0-34.004 28.003-62.002 62.002-62.002 34.004 0 62.002 27.998 62.002 62.002v40z"})))};var Lt;function Rt(){return Rt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},Rt.apply(this,arguments)}const Vt=function(t){return e.createElement("svg",Rt({viewBox:"0 0 512 512",xmlns:"http://www.w3.org/2000/svg"},t),Lt||(Lt=e.createElement("path",{d:"M376 187h-20v-40c0-55-45-100-100-100-54.002 23.996-17.999 27.998 4 31.998s58.002 33.998 58.002 68.002H318v40H136c-22.002 0-40 17.998-40 40v200c0 22.002 17.998 40 40 40h240c22.002 0 40-17.998 40-40V227c0-22.002-17.998-40-40-40zM256 369c-22.002 0-40-17.998-40-40s17.998-40 40-40 40 17.998 40 40-17.998 40-40 40z"})))},jt=({style:e,showZoom:n=!0,showFitView:o=!0,showInteractive:r=!0,onZoomIn:a,onZoomOut:s,onFitView:i,onInteractiveChange:l,className:c})=>{const d=Y((e=>e.setInteractive)),u=Y((e=>e.fitView)),m=Y((e=>e.zoomIn)),p=Y((e=>e.zoomOut)),g=X((e=>e.nodesDraggable&&e.nodesConnectable&&e.elementsSelectable)),f=V()(["react-flow__controls",c]);return t().createElement("div",{className:f,style:e},n&&t().createElement(t().Fragment,null,t().createElement("div",{className:"react-flow__controls-button react-flow__controls-zoomin",onClick:()=>{m(),a&&a()}},t().createElement(Ct,null)),t().createElement("div",{className:"react-flow__controls-button react-flow__controls-zoomout",onClick:()=>{p(),s&&s()}},t().createElement(Ot,null))),o&&t().createElement("div",{className:"react-flow__controls-button react-flow__controls-fitview",onClick:()=>{u({padding:.1}),i&&i()}},t().createElement(Tt,null)),r&&t().createElement("div",{className:"react-flow__controls-button react-flow__controls-interactive",onClick:()=>{d(!g),l&&l(!g)}},g?t().createElement(Vt,null):t().createElement(Dt,null)))};jt.displayName="Controls",(0,e.memo)(jt);const zt={[Oe.Dots]:"#81818a",[Oe.Lines]:"#eee"},Yt=({variant:n=Oe.Dots,gap:o=15,size:r=.5,color:a,style:s,className:i})=>{const[l,c,d]=X((e=>e.transform)),u=V()(["react-flow__background",i]),m=o*d,p=l%m,g=c%m,f=(0,e.useMemo)((()=>{const e=n===Oe.Lines,t=a||zt[n],o=e?((e,t,n)=>`<path stroke="${n}" strokeWidth="${t}" d="M0 0 V${e} M0 0 H${e}" />`)(m,r,t):((e,t)=>`<circle cx="${e}" cy="${e}" r="${e}" fill="${t}" />`)(r,t);return encodeURIComponent(`<svg width="${m}" height="${m}" xmlns='http://www.w3.org/2000/svg'>${o}</svg>`)}),[n,m,r,a]);return t().createElement("div",{className:u,style:Object.assign(Object.assign({},s),{backgroundImage:`url("data:image/svg+xml;utf8,${f}")`,backgroundPosition:`${p}px ${g}px`})})};Yt.displayName="Background",(0,e.memo)(Yt);const Xt=({children:n})=>{const o=(0,e.useMemo)((()=>(0,j.createStore)(ee)),[]);return t().createElement(j.StoreProvider,{store:o},n)};Xt.displayName="ReactFlowProvider";const Ht=Xt,Ft=wt;function At({id:e,sourceX:n,sourceY:o,targetX:r,targetY:a,sourcePosition:s,targetPosition:i,style:l={},data:c,markerEndId:d}){const u=ke({sourceX:n,sourceY:o,sourcePosition:s,targetX:r-3,targetY:a,targetPosition:i}),m=_e(Me.ArrowClosed,d);return t().createElement("path",{id:e,style:l,className:"react-flow__edge-path path-default",d:u,markerEnd:m})}const Zt=require("react-icons/fa"),Gt=i().div`
		display: flex;
		margin-top: 2px;
		margin-left: 4px;
		align-items: center;
	`,Kt=i().div`
		display: flex;
		margin-top: 2px;
		margin-right: 4px;
		align-items: center;
	`,Wt=i().div`
		padding: 0 5px;
		flex-grow: 1;
	`;function qt({type:e}){return e==g.SOURCE?t().createElement(Gt,{"data-rh":"Default: Allow All, not a part of NetworkPolicy","data-rh-at":"right"},t().createElement(Wt,null,"Allow All"),t().createElement("div",null,t().createElement(Zt.FaQuestion,{style:{color:"rgb(255,192,100)"}}))):t().createElement(Kt,{"data-rh":"Default: Allow All, not a part of NetworkPolicy","data-rh-at":"left"},t().createElement("div",null,t().createElement(Zt.FaQuestion,{style:{color:"rgb(255,192,100)"}})),t().createElement(Wt,null,"Allow All"))}const Ut=i().div`
		display: flex;
		margin-top: 2px;
		margin-left: 4px;
		align-items: center;
	`,Jt=i().div`
		display: flex;
		margin-top: 2px;
		margin-right: 4px;
		align-items: center;
	`,Qt=i().div`
		padding: 0 5px;
		flex-grow: 1;
	`;function en({port:e}){return e.type==g.SOURCE?t().createElement(Ut,{"data-rh":"Deny Out","data-rh-at":"right"},t().createElement(Qt,null,e.name),t().createElement("div",null,t().createElement(Zt.FaBan,{style:{color:"rgb(255,100, 0)"}}))):t().createElement(Jt,{"data-rh":"Deny In","data-rh-at":"left"},t().createElement("div",null,t().createElement(Zt.FaBan,{style:{color:"rgb(255,100, 0)"}})),t().createElement(Qt,null,e.name))}i().div`
		display: flex;
		margin-top: 2px;
		margin-right: 4px;
		align-items: center;
	`;const tn=i().div`
		padding: 0 5px;
		flex-grow: 1;
	`;function nn({port:e,handleClasses:n}){return e.deny?t().createElement(en,{port:e}):e.type==g.SOURCE?t().createElement(ln,null,t().createElement(tn,null,e.name),t().createElement("div",null,t().createElement(ot,{id:e.id,className:n,type:"source",position:Pe.Right,isValidConnection:e=>e.sourceNodeId!==e.targetNodeId&&e.toTarget}))):t().createElement(ln,null,t().createElement("div",null,t().createElement(ot,{id:e.id,className:n,type:"target",position:Pe.Left,isValidConnection:e=>e.sourceNodeId!==e.targetNodeId&&!e.toTarget})),t().createElement(tn,null,e.name))}const on=i().div`
		background: rgba(0, 0, 0, 0.3);
		display: flex;
		white-space: nowrap;
		justify-items: center;
	`,rn=i().div`
		flex-grow: 1;
		padding: 5px 5px;
	`,an=i().div`
		display: flex;
		background-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));
	`,sn=i().div`
		flex-grow: 1;
		display: flex;
		flex-direction: column;
		&:first-of-type {
			margin-right: 10px;
		}
		&:only-child {
			margin-right: 0px;
		}
	`,ln=i().div`
		display: flex;
		margin-top: 1px;
		align-items: center;
	`,cn=(i().div`
		display: flex;
		margin-top: 2px;
		margin-left: 4px;
		align-items: center;
	`,i().div`
		display: flex;
		margin-top: 2px;
		margin-right: 4px;
		align-items: center;
	`,i().div`
		padding: 0 5px;
		flex-grow: 1;
	`,(0,e.memo)((({data:e,id:n})=>{const o=X((e=>e.connectionPending)),r=X((e=>e.connectionOnlyNodeId)),a=e.ports.filter((e=>e.type===g.TARGET)),s=e.ports.filter((e=>e.type===g.SOURCE)),i=V()(["port",{"react-flow__handle-connecting":o&&r!==n}]);return t().createElement("div",{style:{backgroundColor:e.isPartOfNetworkPolicy?"rgb(192,255,0)":""}},t().createElement(on,null,t().createElement(rn,null,e.name)),t().createElement(an,null,t().createElement(sn,null,0===a.length&&e.isPartOfNetworkPolicy&&t().createElement(qt,{type:g.TARGET}),a.map((e=>t().createElement(nn,{key:e.id,port:e,handleClasses:i})))),t().createElement(sn,null,0===s.length&&e.isPartOfNetworkPolicy&&t().createElement(qt,{type:g.SOURCE}),s.map((e=>t().createElement(nn,{key:e.id,port:e,handleClasses:i}))))))})));function dn({elements:e}){const n={default:cn,input:cn,output:cn},o={default:At};return t().createElement(Ht,null,t().createElement(Ft,{elements:e,nodeTypes:n,edgeTypes:o}))}require("react-hint/css/index.css");const un=a()(t());function mn({networkPolicy:e,style:n,canvasStyle:o}){let r,a="";try{const t=function(e){try{return new B(JSON.stringify(u.load(e,{})))}catch(e){console.error(e)}}(e);t||(a="Error parsing NetworkPolicy manifest!"),t&&(r=D(t))}catch(e){a="Can not visualize NetworkPolicy!",console.error(e)}return t().createElement("div",{style:n},t().createElement(c,{text:a}),""===a&&t().createElement(t().Fragment,null,t().createElement(un,{autoPosition:!0,events:!0}),t().createElement("div",{id:"canvas",style:o},t().createElement(dn,{elements:r}))))}})(),o})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,